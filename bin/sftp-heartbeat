#!/usr/bin/env ruby

#
# Heartbeat script to monitor status of sftp service.
#

require '/opt/eway/lib/bootstrap'
require 'LogFile'
require 'MailAlert'
require 'PagerAlert'
require 'net/sftp'
require 'net/ftp'

class Heartbeat
  #
  # CONFIGURATION
  #
  HOST      = $config['host']
  USER      = $config['login']['user']
  PASSWORD  = $config['login']['password']
  INTERVAL  = $config['interval']
  TIMEOUT   = $config['timeout']
  ATTEMPTS  = $config['attempts']
  TEST_DIR  = VAR_DIR/NAME/'test'

  class << self

    # Appends a unique suffix to path to prevent collisions from
    # multiple versions of this script checking the same host.
    def uniquify(path)
      path + "." + HOSTNAME
    end

    def check_sftp
      $log.info "sftp: check"

      Net::SFTP.start(HOST, USER, :password => PASSWORD) do |sftp|
        td = TEST_DIR

        # Upload a file.
        f = 'data.txt'
        fr = uniquify f
        up = 'upload'
        sftp.upload! td/f, up/fr
        sftp.stat! up/fr
        sftp.remove! up/fr

        # Download a file.
        f = '.heartbeat-test-file-do-not-delete'
        FileUtils.remove(td/f) if File.exists?(td/f)
        sftp.download! 'download'/f, td/f
        FileUtils.remove td/f
      end

      $log.info "sftp: ok"
    rescue
      raise "sftp: #{$!}"
    end

    def check_ftp
      $log.info "ftp: check"

      Net::FTP.open(HOST) do |ftp|
        # Make sure to use passive mode to prevent the server from
        # trying to open a connection back to the client (active
        # mode).
        ftp.passive = true

        ftp.login USER, PASSWORD
        ftp.chdir('upload')
        f = "data.txt"
        fr = uniquify f
        ftp.putbinaryfile TEST_DIR/f, fr
        ftp.delete fr
      end

      $log.info "ftp: ok"
    rescue
      raise "ftp: #{$!}"
    end

    def check_all
      tries ||= ATTEMPTS
      thread = Thread.new do
        check_sftp
        check_ftp
      end
      thread.join TIMEOUT or raise "timed out after #{TIMEOUT} seconds"
    rescue
      $log.info "retrying after error: #{$!}"
      retry unless (tries -= 1).zero?
      raise
    end

    def start
      while true do
        begin
          check_all
        rescue
          $log.error "sftp-heartbeat: #{$!}"
        end

        sleep INTERVAL
      end
    end

  end
end

Dir.chdir PROJECT_DIR
$stdout.sync = true

Heartbeat.start
